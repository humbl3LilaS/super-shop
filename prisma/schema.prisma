// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

// zod schema generator
generator zod {
  provider              = "zod-prisma"
  output                = "./lib/validators"
  relationalModel       = true
  modelCase             = "PascalCase"
  imports               = "./lib/validators/helpers"
  modelSuffix           = "ModelSchema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  slug        String      @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal     @default(0) @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  rating      Decimal     @default(0) @db.Decimal(3, 2) /// @zod.custom(imports.currency)
  numReviews  Int         @default(0)
  isFeatured  Boolean     @default(false)
  banner      String?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  OrderItem   OrderItem[]
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?

  role          String   @default("USER")
  password      String?
  address       Json?    @db.Json ///@zod.custom(imports.address)
  paymentMethod String?
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)

  accounts Account[]
  Session  Session[]
  cart     Cart[]
  Order    Order[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) ///@zod.custom(imports.cartItem)
  itemsPrice    Decimal  @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  totalPrice    Decimal  @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  shippingFee   Decimal  @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  tax           Decimal  @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  createdAt     DateTime @default(now()) @db.Timestamp(6) /// @zod.custom(z.string().min(1))
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(uuid()) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json ///@zod.custom(imports.address)
  paymentMethod   String ///@zod.custom(imports.paymentMethod)
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  shippingFee     Decimal     @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  tax             Decimal     @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  totalPrice      Decimal     @db.Decimal(12, 2) /// @zod.custom(imports.currency)
  isPaid          Boolean     @default(false)
  isDelivered     Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6) /// @zod.custom(z.string().min(1))
  deliveredAt     DateTime?   @db.Timestamp(6) /// @zod.custom(z.string().min(1))
  createdAt       DateTime    @default(now()) @db.Timestamp(6) /// @zod.custom(z.string().min(1))
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem       OrderItem[]
}

model OrderItem {
  orderId   String @db.Uuid
  productId String @db.Uuid
  qty       Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}
